<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
/*
 * 
 * @date: 2019. 07. 11. 
 *
 * @author: 이힘찬 
 * 
 * @description: MemberDaoMapper 
 * 
 */ 
 -->
 <mapper namespace="kr.or.bit.dao.ManagerDao">
 	<select id="selectMembersByRole" resultType="kr.or.bit.model.Member">
 		SELECT m.username, m.password, m.name, m.email, m.enabled, m.profile_photo, m.course_id, a.role, c.course_name, c.end_date
		FROM member m JOIN authorities a 
		ON m.username = a.username
		JOIN course c
		ON m.course_id=c.id
		WHERE a.role = #{role}
 	</select>
 	<select id="selectMembersByRoleAndOneIntColumn" resultType="kr.or.bit.model.Member">
 		SELECT m.username, m.password, m.name, m.email, m.enabled, m.profile_photo, m.course_id, a.role, c.course_name, c.end_date
		FROM member m JOIN authorities a 
		ON m.username = a.username
		JOIN course c
		ON m.course_id=c.id
		WHERE a.role = #{role} 
		AND   m.${intColumn} = #{intValue}
 	</select>
 	<select id="selectMembersByRoleAndOneStringColumn" resultType="kr.or.bit.model.Member">
 		SELECT m.username, m.password, m.name, m.email, m.enabled, m.profile_photo, m.course_id, a.role, c.course_name, c.end_date
		FROM member m JOIN authorities a 
		ON m.username = a.username
		JOIN course c
		ON m.course_id=c.id
		WHERE a.role = #{role} 
		AND   m.${stringColumn} LIKE '%${stringValue}%'
 	</select>
 	<select id="selectMembersByRoleAndEnableAndCourseId" resultType="kr.or.bit.model.Member">
 		SELECT m.username, m.password, m.name, m.email, m.enabled, m.profile_photo, m.course_id, a.role, c.course_name, c.end_date
		FROM member m JOIN authorities a 
		ON m.username = a.username
		JOIN course c
		ON m.course_id=c.id
		WHERE a.role = #{role} 
		AND   m.enabled = #{enabled}
		AND   m.course_id = #{course_id}
 	</select>
 	<select id="selectMembersByRoleAndStringColumnAndIntColumn" resultType="kr.or.bit.model.Member">
 		SELECT m.username, m.password, m.name, m.email, m.enabled, m.profile_photo, m.course_id, a.role, c.course_name, c.end_date
		FROM member m JOIN authorities a 
		ON m.username = a.username
		JOIN course c
		ON m.course_id=c.id
		WHERE a.role = #{role} 
		AND   m.${stringColumn} LIKE '%${stringValue}%'
		AND   m.${intColumn} = #{intValue}
 	</select>
 	<select id="selectMemberByRoleAndEnableAndCourseIdAndSearch" resultType="kr.or.bit.model.Member">
 		SELECT m.username, m.password, m.name, m.email, m.enabled, m.profile_photo, m.course_id, a.role, c.course_name, c.end_date
		FROM member m JOIN authorities a 
		ON m.username = a.username
		JOIN course c
		ON m.course_id=c.id
		WHERE a.role = #{role} 
		AND   m.enabled = #{enabled}
		AND   m.course_id = #{course_id}
		AND   m.${stringColumn} LIKE '%${stringValue}%'
 	</select>
 	<update id="updateMemberEnabled">
 		UPDATE member
		SET enabled=#{enabled}
		WHERE username=#{username}
 	</update>
 	<select id="countCourseBySubject" resultType="kr.or.bit.model.Course">
		SELECT count(*) count, s.subject subject_name
		FROM course c JOIN subject s ON c.subject = s.id
		GROUP BY c.subject
		ORDER BY count
 	</select>
 	<select id="countAllCourse" resultType="Integer">
 		SELECT count(*) count
 		FROM course
 	</select>
 	<select id="countEnableMember" resultType="kr.or.bit.model.Course">
 		SELECT count(*) AS count, c.course_name, c.start_date, c.end_date, c.subject AS subject_name
		FROM member m JOIN course c ON m.course_id = c.id
		WHERE m.enabled=0
		GROUP BY c.course_name
		ORDER BY count DESC;
 	</select>
 	<select id="articleWriteRank" resultType="kr.or.bit.model.Course">
 		SELECT count(*) AS count, a.username, m.name, m.course_id, c.course_name, c.start_date, c.end_date, c.subject
		FROM  member m JOIN article a ON m.username = a.username
		JOIN course c ON m.course_id = c.id
		GROUP BY a.username 
		ORDER BY count DESC
 	</select>
 	<select id="commentWriteRank" resultType="kr.or.bit.model.Comment">
 		SELECT count(*) AS count, m.name
		FROM comment c JOIN member m ON c.username = m.username
		GROUP BY c.username
		ORDER BY count DESC
 	</select>
 	<select id="selectCourseList" resultType="kr.or.bit.model.Course">
 		SELECT c.id, c.course_name, c.start_date, c.end_date, s.subject AS subject_name, c.classroom_id,
		(SELECT m.name
		FROM member m JOIN authorities a ON m.username=a.username 
		WHERE role="TEACHER" AND course_id=c.id AND course_id != 0) AS teacher,
		(SELECT count(*) FROM member WHERE course_id = c.id) AS students
		FROM course c JOIN subject s ON c.subject = s.id
		ORDER BY c.id DESC
 	</select>
 </mapper>
 