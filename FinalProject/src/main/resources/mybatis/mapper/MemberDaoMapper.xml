<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
/*
 * 
 * @date: 2019. 06. 24. 
 *
 * @author: 이힘찬 
 * 
 * @description: MemberDaoMapper 
 * 
 */ 
 -->
<mapper namespace="kr.or.bit.dao.MemberDao">
  <insert id="insertMember"
    parameterType="kr.or.bit.model.Member">
    INSERT INTO member(username, password, enabled, course_id)
    VALUES(#{username}, #{password}, #{enabled}, #{course_id})
  </insert>
  <insert id="insertNewCourseMembers" parameterType="map">
    { call MakeCourse(#{people}, #{teacher_id}, #{course_id},
    #{start_date}, #{password}) }
  </insert>
  <update id="updateMember"
    parameterType="kr.or.bit.model.Member">
    UPDATE member
    SET password=#{password}, name=#{name}, email=#{email},
    profile_photo=#{profile_photo}
    <if test="course_id != 0">
    	, course_id = #{course_id}
    </if>
    WHERE username=#{username}
  </update>
  <insert id="insertTeacher">
    INSERT INTO member (username, password, name, email, enabled, course_id)
    VALUES (#{username}, #{password}, #{name}, #{email}, 1, 0);
    
    UPDATE authorities
    SET role = 'TEACHER'
    WHERE username = #{username};
    
    INSERT INTO TEACHER (username)
    VALUES (#{username});
  </insert>
  <delete id="deleteMember">
    DELETE FROM member
    WHERE username=#{username}
  </delete>
  <select id="selectAllMembers"
    resultType="kr.or.bit.model.Member">
    SELECT username, password, name, email, profile_photo, course_id, group_id
    FROM MEMBER m
    LEFT JOIN GROUP_MEMBER g
    ON m.username = g.member_name
  </select>
  <select id="selectStudentsList"
    resultType="kr.or.bit.model.Member">
    SELECT m.username, m.password, m.name, m.email, m.profile_photo, course_id, group_id
    FROM member m
    LEFT JOIN authorities a
    ON m.username = a.username
    LEFT JOIN GROUP_MEMBER g
    ON m.username = g.member_name
    WHERE m.course_id = #{course_id} AND a.role = 'student'
  </select>
  <select id="selectMemberByUsername"
    resultType="kr.or.bit.model.Member">
    SELECT m.username, m.password, name, email, profile_photo, course_id, group_id, a.role
    FROM MEMBER m
    LEFT JOIN GROUP_MEMBER g
    ON m.username = g.member_name
    AND g.group_id = (SELECT max(group_id) from group_member where member_name = #{username})
    LEFT JOIN authorities a
    ON m.username = a.username
    WHERE m.username = #{username};
  </select>
  <select id="selectAllMembersByMycourse" resultType="kr.or.bit.model.Member">
  	SELECT m.username, name, email, profile_photo, course_id, role
	FROM member m
	LEFT JOIN authorities a ON m.username=a.username
	WHERE m.course_id=#{course_id} AND m.enabled=1 AND a.role='STUDENT';
  </select>
  <select id="selectStudent" resultType="kr.or.bit.model.Member">
  	SELECT a.USERNAME, NAME, COURSE_ID, END_DATE, role
	FROM MEMBER b JOIN COURSE c ON b.course_id = c.id JOIN AUTHORITIES a ON b.username = a.username
	WHERE ENABLED = 1 AND role = 'STUDENT';
  </select>
  <update id="updateMemberGraduate">
  	UPDATE authorities
  	SET role = "GRADUATE"
  	WHERE username=#{username} 
  </update>
  <update id="updateMemberWithoutFile"
    parameterType="kr.or.bit.model.Member">
    UPDATE member
    SET password=#{password}, name=#{name}, email=#{email}
    WHERE username=#{username}
  </update>
  <update id="updateMemberOnlyFile"
  	parameterType="kr.or.bit.model.Member">
  	UPDATE MEMBER
  	SET PROFILE_PHOTO =#{profile_photo}
  	WHERE USERNAME=#{username}
  </update>
  
  <select id="getCountCourseMember" resultType="int" >
    select count(enabled)
    from member
    where course_id=#{courseid}
    <choose>
      <when test="status == 'enable'">
        and enabled =1
      </when>
      <when test="status == 'disable'">
        and enabled =0
      </when>
    </choose>
  </select>
  
  <select id="selectMemberSearchByAjax" resultType="kr.or.bit.model.Member">
  	SELECT m.username, m.name, a.role, enabled,c.course_name,c.end_date,profile_photo
  	FROM member m join authorities a on m.username=a.username join course c on m.course_id = c.id
  	WHERE a.role=#{role} 
  	<if test="enabled != 999">
  	and enabled=#{enabled} 
  	</if>
  	<if test="course_id != 999">
  	and course_id = #{course_id}
  	</if>
  </select>
  <select id="countMemberSearchByAjax" resultType="Integer">
   	SELECT count(*)
  	FROM member m join authorities a on m.username=a.username
  	WHERE a.role=#{role} 
  	<if test="enabled != 999">
  	and enabled=#{enabled} 
  	</if>
  	<if test="course_id != 999">
  	and course_id = #{course_id}
  	</if>
  </select>
  <update id="updateEnabled">
  	update member 
  	set enabled = 1
  	where username = #{username};

  </update>
  <select id="selectAllStudent" resultType = "kr.or.bit.model.Member">
  	SELECT username, name, email, enabled, profile_photo, course_id
  	FROM MEMBER
  </select>
  <update id="updateTeacherCourseId">
  	UPDATE MEMBER
  	SET COURSE_ID = #{course_id}
  	WHERE USERNAME = #{username} 
  </update>
</mapper>







	