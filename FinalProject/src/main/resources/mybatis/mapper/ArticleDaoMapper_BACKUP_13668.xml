<?xml version="1.0" encoding="UTF-8"?>
<!-- /* * * @date: 2019. 06. 28. * * @author: 권예지 * * @description: ArticleDaMapper로 
  DAO의 parameter에 들어갈 값을 매핑해서 쿼리문을 보낸다 * */ -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.bit.dao.ArticleDao"> 
  <select id="selectArticlesByPage" resultType="kr.or.bit.model.Article">
<<<<<<< HEAD
   SET @rownum:=0;
	SELECT rownum, id, title, content, time, updated_time, view_count, original_id, enable, level, username, board_id,
	(SELECT count(*) FROM article_vote WHERE article_id=c.id) as votenum 
	FROM(SELECT b.* 
		 FROM (SELECT @rownum:=@rownum + 1 as rownum, a.*
      		   FROM (SELECT id, title, content, time, updated_time, view_count, original_id, enable, level, username, board_id
            		 FROM ARTICLE 
	        		 WHERE board_id = #{board_id}
            		 ORDER BY id DESC) a) b
		
			   WHERE rownum BETWEEN #{start} AND #{end}) c;
=======
    SET @rownum:=0;
    SELECT * 
    FROM (SELECT @rownum:=@rownum + 1 as rownum, a.*
          FROM (SELECT id, title, content, time, updated_time, view_count, original_id, enable, level, username, board_id
                FROM ARTICLE 
	              WHERE board_id = #{board_id}
                ORDER BY id DESC) a) b
    WHERE rownum BETWEEN #{start} AND #{end};
>>>>>>> 852d2580d6649ed9d4910bc7d0432d4fe89ed9e0
  </select>
  <select id="selectArticlesSorted" resultType="kr.or.bit.model.Article">
    SET @rownum:=0;
    SELECT * 
    FROM (SELECT @rownum:=@rownum + 1 as rownum, a.*
          FROM (SELECT id, title, content, time, updated_time, view_count, original_id, enable, level, username, board_id
                FROM ARTICLE 
	            WHERE board_id = #{board_id}
                ORDER BY view_count DESC, id DESC) a) b
    WHERE rownum BETWEEN #{start} AND #{end};
  </select>
  <select id="selectArticlesBySearchWord" resultType="kr.or.bit.model.Article">
    SET @rownum:=0;
    SELECT * 
    FROM (SELECT @rownum:=@rownum + 1 as rownum, a.*
          FROM (SELECT id, title, content, time, updated_time, view_count, original_id, enable, level, a.username, board_id
                FROM ARTICLE A
                LEFT JOIN MEMBER M
                ON a.username = m.username
                WHERE board_id = #{board_id}
                <choose>
                  <when test="criteria != 'titlecontent'">
                    AND ${criteria} LIKE '%${search}%'
                  </when>
                  <otherwise>
                    AND (title LIKE '%${search}%' OR content LIKE '%${search}%')
                  </otherwise>
                </choose>
          ORDER BY time DESC, id DESC) a) b
    WHERE rownum BETWEEN #{start} AND #{end};
  </select>
  <select id="selectArticlesByComment" resultType="kr.or.bit.model.Article">
    SET @rownum:=0;
    SELECT *
    FROM (SELECT @rownum:=@rownum + 1 as rownum, a.*
          FROM (SELECT DISTINCT a.*
                FROM ARTICLE A
                JOIN COMMENT C
                ON a.id = c.article_id
                LEFT JOIN MEMBER M
                ON c.username = m.username
                WHERE BOARD_ID = #{board_id}
                <if test="criteria == 'comment_name'">
                  and m.name like '%${search}%'
                </if>
                <if test="criteria =='comment_content'">
                  and c.content like '%${search}%'
                </if>
                ORDER BY id desc) a ) b
    WHERE rownum BETWEEN #{start} and #{end};
  </select>
  <select id="selectAllArticleByBoardId"
    resultType="kr.or.bit.model.Article">
    SELECT id, title, content, time, updated_time, view_count, original_id, enable,
    level, username, board_id,
    (SELECT count(*) FROM article_vote WHERE article_id=a.id) as votenum,
    (SELECT count(*) FROM comment WHERE article_id=a.id) as commentnum
    FROM ARTICLE as a
    WHERE BOARD_ID=#{board_id} AND ENABLE=1
    ORDER BY id DESC
    LIMIT 5
  </select>
  <select id="selectArticlesOnNextPage"
    resultType="kr.or.bit.model.Article">
    SELECT id, title, content, time, updated_time, view_count, original_id,
    level, username, board_id, enable
    FROM ARTICLE
    WHERE BOARD_ID = #{board_id}
    AND id &lt; #{article_id}
    ORDER BY id DESC
    LIMIT 5
  </select>
  <select id="selectOneArticle" resultType="kr.or.bit.model.Article">
    SELECT a.id, a.title, a.content, a.time, a.view_count, a.original_id, a.level, a.username,
    a.board_id, (SELECT COUNT(*) FROM ARTICLE_VOTE WHERE article_id=#{id}) as "vote_Count", a.updated_time, m.name 
    FROM ARTICLE a JOIN MEMBER m ON a.username = m.username
    WHERE ID=#{id};
  </select>
  <insert id="insertArticle">
    INSERT INTO article(time, updated_time, title, content, username, board_id)
    VALUES (now(), now(), #{title}, #{content}, #{username}, #{board_id})
  </insert>
  <insert id="insertReplyArticle">
  	INSERT INTO article(time, updated_time, title, content, username, board_id, level, original_id)
  	VALUES (now(), now(), #{title}, #{content}, #{username}, #{board_id}, #{level}, #{original_id})
  </insert>
  <update id="deleteArticle"
      parameterType="Integer">
    UPDATE article
    SET enable=0
    WHERE id=#{id}
  </update>
  <update id="updateArticle"
    parameterType="kr.or.bit.model.Article">
    UPDATE article
    SET updated_time=now(),
    title=#{title},
    content=#{content}
    WHERE id=#{id}
  </update>
  <insert id="insertVote">
    INSERT INTO article_vote(article_id, username)
    VALUES (#{id}, #{username})
  </insert>
  <delete id="deleteVote">
    DELETE FROM article_vote
    WHERE article_id=#{id} and username=#{username}
  </delete>
  <select id="countVote" resultType="int">
    SELECT count(*)
    FROM article_vote
    WHERE article_id=#{id}
  </select>
  <select id="getMostRecentArticleId" resultType="int">
    SELECT MAX(id)
    FROM ARTICLE
  </select>
  <select id="selectVote" resultType = "int">
  	SELECT COUNT(*)
  	FROM ARTICLE_VOTE
  	WHERE article_id=#{id} AND username=#{username}
  </select>
  <update id="updateEnable">
  	{call CHANGESTATUS('ARTICLE',#{id})}
  </update>
  <select id="selectHomeworkReplies" resultType="kr.or.bit.model.Article">
	SELECT * 
	FROM article 
	WHERE ORIGINAL_ID = #{article_id} AND ID != #{article_id} AND ENABLE=1;
  </select>
  <select id="selectTagList" resultType="kr.or.bit.model.Tag">
	SELECT id, tag
	FROM article_tag at
	LEFT JOIN tag a
	ON a.id = at.tag_id
	WHERE article_id=#{article_id};
  </select>
  
</mapper>
<!-- public interface ArticleDao { void insertArticle(Article article); void 
  updateArticle(Article article); void deleteArticle(int id); List<Article> 
  selectAllArticle(int board_id); } -->
 