<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- /*
*
* @date: 2019. 06. 24.
*
* @author: 권예지
* 
*/ -->
<mapper namespace="kr.or.bit.dao.CourseDao">
  <select id="selectAvailableClassroom" resultType="kr.or.bit.model.Classroom">
  	SELECT id, classroom_name
  	FROM classroom
  	WHERE id NOT IN(
  		SELECT classroom_id
  		from course
  		where #{start_date} between start_date and end_date
  		or #{end_date} between start_date and end_date
  		or id = 0)
  	AND #{start_date} &lt; #{end_date}
  </select>
  <select id="selectAvailableTeacher" resultType="kr.or.bit.model.Member">
  	SELECT t.id AS teacher_id, m.name 
	FROM teacher t JOIN member m ON t.username = m.username
	WHERE t.id NOT IN(
		SELECT t.id 
		FROM course c 
		JOIN teacher_course tc ON c.id = tc.course_id
		JOIN member m ON m.username = tc.teacher_username
		JOIN teacher t ON t.username = m.username
		WHERE #{start_date} between start_date and end_date
		OR #{end_date} between start_date and end_date
		OR c.id = 0)
	AND #{start_date} &lt; #{end_date}
  </select>
  <select id="selectAllCourse" resultType="kr.or.bit.model.Course">     
    SELECT c.id as id, course_name, start_date, end_date, c.subject as subject, c.classroom_id as classroom_id, r.classroom_name as classroom_name, s.subject as subject_name
    FROM Course as c 
    LEFT JOIN Classroom as r 
    ON c.classroom_id = r.classroom_name
    LEFT JOIN Subject as s 
    ON c.subject = s.subject;
  </select> 
  <select id="selectCourse" resultType="kr.or.bit.model.Course">     
	SELECT c.id as id, course_name, start_date, end_date, c.subject as subject, c.classroom_id as classroom_id, r.classroom_name as classroom_name, s.subject as subject
	FROM Course as c 
	JOIN Classroom as r 
	ON c.classroom_id = r.classroom_name
	JOIN Subject as s 
	ON c.subject = s.id
	WHERE c.id = #{id};
  </select> 
  <select id="selectRecentCourse" resultType="kr.or.bit.model.Course">
    SELECT c.id, course_name, start_date, end_date, c.subject, classroom_id, classroom_name, s.subject as subject_name
    FROM course c
    LEFT JOIN Classroom r 
    ON c.classroom_id = r.classroom_name
    LEFT JOIN Subject s 
    ON c.subject = s.subject
    WHERE c.id = (SELECT MAX(id)
                  FROM course)
  </select>
  <insert id="insertCourse">
 	INSERT INTO course(course_name, start_date, end_date, subject, classroom_id)
 	VALUES (#{course_name}, #{start_date}, #{end_date}, #{subject}, #{classroom_id})
  </insert>
  <delete id="deleteCourse">
    DELETE FROM course 
    WHERE id=#{id}
  </delete>
  <update id="updateCourse" parameterType="kr.or.bit.model.Course">
    UPDATE course
    SET course_name=#{course_name},
    start_date=#{start_date},
    end_date=#{end_date},
    subject=#{subject},
    classroom_id=#{classroom_id}
    WHERE id=#{id}
  </update>
  <select id="selectAllTeacherCourse" resultType="kr.or.bit.model.Course">
    SELECT id, course_name, start_date, end_date, subject, classroom_id
    FROM COURSE
    WHERE ID IN (SELECT course_id
                 FROM TEACHER_COURSE
                 WHERE TEACHER_USERNAME = #{username})
    ORDER BY id DESC;                 
  </select>
  <select id="selectAllCourseList" resultType="kr.or.bit.model.Course">
    SELECT c.id, c.course_name, c.start_date, c.end_date, s.subject AS subject_name, c.classroom_id,
    (SELECT m.name
    FROM member m JOIN teacher_course t ON m.username = t.teacher_username
    WHERE t.course_id = c.id AND t.course_id != 0) AS teacher,
    (SELECT count(*) FROM member WHERE course_id = c.id) AS students
    FROM course c JOIN subject s ON c.subject = s.id
    ORDER BY c.id DESC
  </select>
  <select id="selectCurrentCourseList" resultType="kr.or.bit.model.Course">
    SELECT c.id, c.course_name, c.start_date, c.end_date, s.subject AS subject_name, c.classroom_id,
    (SELECT m.name
    FROM member m JOIN teacher_course t ON m.username = t.teacher_username
    WHERE t.course_id = c.id AND t.course_id != 0) AS teacher,
    (SELECT count(*) FROM member WHERE course_id = c.id) AS students
    FROM course c JOIN subject s ON c.subject = s.id
    WHERE curdate() between c.start_date and c.end_date
    ORDER BY c.classroom_id
  </select>
  <select id="selectEndCourseList" resultType="kr.or.bit.model.Course">
    SELECT c.id, c.course_name, c.start_date, c.end_date, s.subject AS subject_name, c.classroom_id,
    (SELECT m.name
    FROM member m JOIN teacher_course t ON m.username = t.teacher_username
    WHERE t.course_id = c.id AND t.course_id != 0) AS teacher,
    (SELECT count(*) FROM member WHERE course_id = c.id) AS students
    FROM course c JOIN subject s ON c.subject = s.id
    WHERE curdate() &gt; c.end_date
    ORDER BY c.end_date DESC
    LIMIT #{pager.start}, #{pager.articlesOnPage}
  </select>
  <select id="countEndCourseList" resultType="Integer">
    SELECT count(*) 
    FROM course 
    WHERE curdate() &gt; end_date
  </select>
  <select id="selectOpeningCourseList" resultType="kr.or.bit.model.Course">
    SELECT c.id, c.course_name, c.start_date, c.end_date, s.subject AS subject_name, c.classroom_id,
    (SELECT m.name
    FROM member m JOIN teacher_course t ON m.username = t.teacher_username
    WHERE t.course_id = c.id AND t.course_id != 0) AS teacher,
    (SELECT count(*) FROM member WHERE course_id = c.id) AS students
    FROM course c JOIN subject s ON c.subject = s.id
    WHERE curdate() &lt; c.start_date
    ORDER BY c.start_date
  </select>
</mapper>
  